plugins {
  id 'com.palantir.docker' version '0.27.0'
  id 'com.palantir.docker-run' version '0.27.0'
}

apply from: gradle.oshCoreDir + '/common.gradle'
version = "0.2.0-" + buildNumber;

dependencies {
  implementation 'org.sensorhub:sensorhub-core:' + oshCoreVersion
  implementation 'org.sensorhub:sensorhub-webui-core:' + oshCoreVersion
  implementation 'org.sensorhub:sensorhub-service-sweapi:' + oshCoreVersion
  implementation 'org.sensorhub:sensorhub-service-swe:' + oshCoreVersion
  implementation 'org.sensorhub:sensorhub-service-video:[0.1,2.0)'
  implementation 'org.sensorhub:sensorhub-service-sensorthings:[0.1,2.0)'
  implementation 'org.sensorhub:sensorhub-service-mqtt-hivemq:[0.1,2.0)'
  implementation 'org.sensorhub:sensorhub-service-sweapi-mqtt:[0.1,2.0)'
  implementation 'org.sensorhub:sensorhub-driver-fakegps:[0.1,2.0)'
  implementation 'org.sensorhub:sensorhub-driver-fakeweather:[0.1,2.0)'
  implementation 'org.sensorhub:sensorhub-driver-misb-uas:[0.1,2.0)'
  implementation 'org.sensorhub:sensorhub-driver-isa:[0.1,2.0)'
  implementation 'org.sensorhub:sensorhub-storage-usgswater:[0.1,2.0)'
  implementation 'org.sensorhub:sensorhub-process-utils:[0.1,2.0)'
  implementation 'org.sensorhub:sensorhub-process-vecmath:[0.1,2.0)'
  implementation 'org.sensorhub:sensorhub-process-geoloc:[0.1,2.0)'
  implementation 'org.sensorhub:sensorhub-process-ffmpeg:[0.1,2.0)'
  implementation 'org.sensorhub:sensorhub-process-opencv:[0.1,2.0)'
  implementation project('sensorhub-process-t17')
  implementation project('sensorhub-datafetch-masbus')
}

configurations {
  runtime {
    exclude group: 'org.bytedeco', module: 'ffmpeg-4.3.2-1.5.5-android-arm64'
  }
}

distributions {
  main {
    contents {
      from 'scripts'
      from('config')
      from 'README.md'
      into('sml') {
        from 'sml'
      }
      into('web') {
        from 'web'
      }
      into('lib') {
        from project.configurations.runtimeClasspath
        // exclude native libs that we don't need
        exclude '*-android-*.jar'
        exclude '*-windows-*.jar'
        exclude '*-macosx-*.jar'
        exclude '*-ios-*.jar'
        exclude '*-linux-arm*.jar'        
        exclude '*-linux-ppc*.jar'
      }
    }
  }
}

docker {
  dockerfile file('dockerfile')
  name "${project.name}:${project.version}"
  tag 'gcr', "gcr.io/osh-cloud/${docker.name}"
  files tasks.distZip.outputs,'deploy/osh-node'
  buildArgs([
    OSH_NODE_NAME: "${project.name}-${project.version}"
  ])
}

dockerRun {
  name "${project.name}"
  image "${docker.name}"
  volumes 'build/tmp': '/opt/osh-node/data'
  ports '8080:8080'
  daemonize true
  clean true
}







